-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Grammar.Par
  ( happyError
  , myLexer
  , pProg
  ) where

import Prelude

import qualified Grammar.Abs
import Grammar.Lex

}

%name pProg_internal Prog
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'        { PT _ (TS _ 1)  }
  '!='       { PT _ (TS _ 2)  }
  '#'        { PT _ (TS _ 3)  }
  '$'        { PT _ (TS _ 4)  }
  '%'        { PT _ (TS _ 5)  }
  '&'        { PT _ (TS _ 6)  }
  '&&'       { PT _ (TS _ 7)  }
  '\''       { PT _ (TS _ 8)  }
  '('        { PT _ (TS _ 9)  }
  ')'        { PT _ (TS _ 10) }
  '*'        { PT _ (TS _ 11) }
  '+'        { PT _ (TS _ 12) }
  '++'       { PT _ (TS _ 13) }
  ','        { PT _ (TS _ 14) }
  '-'        { PT _ (TS _ 15) }
  '--'       { PT _ (TS _ 16) }
  '/'        { PT _ (TS _ 17) }
  ';'        { PT _ (TS _ 18) }
  '<'        { PT _ (TS _ 19) }
  '<='       { PT _ (TS _ 20) }
  '='        { PT _ (TS _ 21) }
  '=='       { PT _ (TS _ 22) }
  '>'        { PT _ (TS _ 23) }
  '>='       { PT _ (TS _ 24) }
  '@'        { PT _ (TS _ 25) }
  'False'    { PT _ (TS _ 26) }
  'Main'     { PT _ (TS _ 27) }
  'True'     { PT _ (TS _ 28) }
  'break'    { PT _ (TS _ 29) }
  'continue' { PT _ (TS _ 30) }
  'create'   { PT _ (TS _ 31) }
  'else'     { PT _ (TS _ 32) }
  'endfor'   { PT _ (TS _ 33) }
  'endif'    { PT _ (TS _ 34) }
  'endwhile' { PT _ (TS _ 35) }
  'for'      { PT _ (TS _ 36) }
  'if'       { PT _ (TS _ 37) }
  'print'    { PT _ (TS _ 38) }
  'return'   { PT _ (TS _ 39) }
  'then'     { PT _ (TS _ 40) }
  'to'       { PT _ (TS _ 41) }
  'while'    { PT _ (TS _ 42) }
  '{'        { PT _ (TS _ 43) }
  '||'       { PT _ (TS _ 44) }
  '}'        { PT _ (TS _ 45) }
  L_Ident    { PT _ (TV _)    }
  L_integ    { PT _ (TI _)    }
  L_quoted   { PT _ (TL _)    }

%%

Ident :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Ident) }
Ident  : L_Ident { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Ident (tokenText $1)) }

Integer :: { (Grammar.Abs.BNFC'Position, Integer) }
Integer  : L_integ  { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Integer) }

String  :: { (Grammar.Abs.BNFC'Position, String) }
String   : L_quoted { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), ((\(PT _ (TL s)) -> s) $1)) }

Prog :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Prog) }
Prog
  : ListTopDefVar ListTopDef 'Main' '{' Blok '}' { (fst $1, Grammar.Abs.Program (fst $1) (snd $1) (snd $2) (snd $5)) }

TopDefVar :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.TopDefVar) }
TopDefVar
  : 'create' '(' Type Ident ')' ';' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.VarDef (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $4)) }

ListTopDefVar :: { (Grammar.Abs.BNFC'Position, [Grammar.Abs.TopDefVar]) }
ListTopDefVar
  : {- empty -} { (Grammar.Abs.BNFC'NoPosition, []) }
  | TopDefVar ListTopDefVar { (fst $1, (:) (snd $1) (snd $2)) }

TopDef :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.TopDef) }
TopDef
  : Type Ident '(' ListArg ')' '{' Blok '}' { (fst $1, Grammar.Abs.FnDef (fst $1) (snd $1) (snd $2) (snd $4) (snd $7)) }

ListTopDef :: { (Grammar.Abs.BNFC'Position, [Grammar.Abs.TopDef]) }
ListTopDef
  : {- empty -} { (Grammar.Abs.BNFC'NoPosition, []) }
  | TopDef ListTopDef { (fst $1, (:) (snd $1) (snd $2)) }

Arg :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Arg) }
Arg
  : Type Ident { (fst $1, Grammar.Abs.Argcopy (fst $1) (snd $1) (snd $2)) }
  | '&' Type Ident { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Argref (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }

ListArg :: { (Grammar.Abs.BNFC'Position, [Grammar.Abs.Arg]) }
ListArg
  : {- empty -} { (Grammar.Abs.BNFC'NoPosition, []) }
  | Arg { (fst $1, (:[]) (snd $1)) }
  | Arg ',' ListArg { (fst $1, (:) (snd $1) (snd $3)) }

Blok :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Blok) }
Blok : ListStmt { (fst $1, Grammar.Abs.Block (fst $1) (snd $1)) }

ListStmt :: { (Grammar.Abs.BNFC'Position, [Grammar.Abs.Stmt]) }
ListStmt
  : {- empty -} { (Grammar.Abs.BNFC'NoPosition, []) }
  | Stmt ListStmt { (fst $1, (:) (snd $1) (snd $2)) }

Stmt :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Stmt) }
Stmt
  : ';' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Empty (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'create' '(' Type Ident ')' ';' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Decl (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $4)) }
  | Type Ident '=' Expr ';' { (fst $1, Grammar.Abs.Ass (fst $1) (snd $1) (snd $2) (snd $4)) }
  | Type Ident '++' ';' { (fst $1, Grammar.Abs.Incr (fst $1) (snd $1) (snd $2)) }
  | Type Ident '--' ';' { (fst $1, Grammar.Abs.Decr (fst $1) (snd $1) (snd $2)) }
  | 'return' Expr ';' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Ret (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'return' ';' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Retv (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'if' Expr 'then' ListStmt 'endif' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Cond (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | 'if' Expr 'then' ListStmt 'else' ListStmt 'endif' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.CondElse (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $6)) }
  | 'while' Expr 'then' ListStmt 'endwhile' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.While (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | 'for' Type Ident '=' Expr 'to' Expr 'then' ListStmt 'endfor' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.For (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3) (snd $5) (snd $7) (snd $9)) }
  | Expr ';' { (fst $1, Grammar.Abs.SExp (fst $1) (snd $1)) }
  | 'continue' ';' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Continue (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'break' ';' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Break (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'print' '(' Expr ')' ';' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Print (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $3)) }

Type :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Type) }
Type
  : '$' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Int (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
  | '#' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Str (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
  | '\'' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Bool (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
  | '@' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Void (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }

ListType :: { (Grammar.Abs.BNFC'Position, [Grammar.Abs.Type]) }
ListType
  : Type { (fst $1, (:[]) (snd $1)) }
  | Type ',' ListType { (fst $1, (:) (snd $1) (snd $3)) }

Expr6 :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Expr) }
Expr6
  : Type Ident { (fst $1, Grammar.Abs.EVar (fst $1) (snd $1) (snd $2)) }
  | Integer { (fst $1, Grammar.Abs.ELitInt (fst $1) (snd $1)) }
  | 'True' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.ELitTrue (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'False' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.ELitFalse (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
  | Type Ident '(' ListExpr ')' { (fst $1, Grammar.Abs.EApp (fst $1) (snd $1) (snd $2) (snd $4)) }
  | String { (fst $1, Grammar.Abs.EString (fst $1) (snd $1)) }

Expr5 :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Expr) }
Expr5
  : '-' Expr6 { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Neg (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '!' Expr6 { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Not (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }

Expr4 :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Expr) }
Expr4
  : Expr4 MulOp Expr5 { (fst $1, Grammar.Abs.EMul (fst $1) (snd $1) (snd $2) (snd $3)) }

Expr3 :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Expr) }
Expr3
  : Expr3 AddOp Expr4 { (fst $1, Grammar.Abs.EAdd (fst $1) (snd $1) (snd $2) (snd $3)) }

Expr2 :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Expr) }
Expr2
  : Expr2 RelOp Expr3 { (fst $1, Grammar.Abs.ERel (fst $1) (snd $1) (snd $2) (snd $3)) }

Expr1 :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Expr) }
Expr1
  : Expr2 '&&' Expr1 { (fst $1, Grammar.Abs.EAnd (fst $1) (snd $1) (snd $3)) }

Expr :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.Expr) }
Expr
  : Expr1 '||' Expr { (fst $1, Grammar.Abs.EOr (fst $1) (snd $1) (snd $3)) }

ListExpr :: { (Grammar.Abs.BNFC'Position, [Grammar.Abs.Expr]) }
ListExpr
  : {- empty -} { (Grammar.Abs.BNFC'NoPosition, []) }
  | Expr { (fst $1, (:[]) (snd $1)) }
  | Expr ',' ListExpr { (fst $1, (:) (snd $1) (snd $3)) }

AddOp :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.AddOp) }
AddOp
  : '+' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Plus (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
  | '-' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Minus (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }

MulOp :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.MulOp) }
MulOp
  : '*' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Times (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
  | '/' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Div (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
  | '%' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.Mod (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }

RelOp :: { (Grammar.Abs.BNFC'Position, Grammar.Abs.RelOp) }
RelOp
  : '<' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.LTH (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
  | '<=' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.LE (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
  | '>' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.GTH (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
  | '>=' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.GE (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
  | '==' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.EQU (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }
  | '!=' { (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1), Grammar.Abs.NE (uncurry Grammar.Abs.BNFC'Position (tokenLineCol $1))) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

-- Entrypoints

pProg :: [Token] -> Err Grammar.Abs.Prog
pProg = fmap snd . pProg_internal
}

