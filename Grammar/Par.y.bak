-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Grammar.Par where
import Grammar.Abs
import Grammar.Lex
import Grammar.ErrM

}

%name pProg Prog
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '#' { PT _ (TS _ 3) }
  '$' { PT _ (TS _ 4) }
  '%' { PT _ (TS _ 5) }
  '&' { PT _ (TS _ 6) }
  '&&' { PT _ (TS _ 7) }
  '\'' { PT _ (TS _ 8) }
  '(' { PT _ (TS _ 9) }
  ')' { PT _ (TS _ 10) }
  '*' { PT _ (TS _ 11) }
  '+' { PT _ (TS _ 12) }
  '++' { PT _ (TS _ 13) }
  ',' { PT _ (TS _ 14) }
  '-' { PT _ (TS _ 15) }
  '--' { PT _ (TS _ 16) }
  '/' { PT _ (TS _ 17) }
  ';' { PT _ (TS _ 18) }
  '<' { PT _ (TS _ 19) }
  '<=' { PT _ (TS _ 20) }
  '=' { PT _ (TS _ 21) }
  '==' { PT _ (TS _ 22) }
  '>' { PT _ (TS _ 23) }
  '>=' { PT _ (TS _ 24) }
  '@' { PT _ (TS _ 25) }
  'False' { PT _ (TS _ 26) }
  'Main' { PT _ (TS _ 27) }
  'True' { PT _ (TS _ 28) }
  'break' { PT _ (TS _ 29) }
  'continue' { PT _ (TS _ 30) }
  'create' { PT _ (TS _ 31) }
  'declare' { PT _ (TS _ 32) }
  'else' { PT _ (TS _ 33) }
  'endif' { PT _ (TS _ 34) }
  'endwhile' { PT _ (TS _ 35) }
  'if' { PT _ (TS _ 36) }
  'print' { PT _ (TS _ 37) }
  'return' { PT _ (TS _ 38) }
  'then' { PT _ (TS _ 39) }
  'while' { PT _ (TS _ 40) }
  '{' { PT _ (TS _ 41) }
  '||' { PT _ (TS _ 42) }
  '}' { PT _ (TS _ 43) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_quoted { PT _ (TL $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
String  :: { String }  : L_quoted {  $1 }

Prog :: { (Prog ()) }
Prog : ListTopDefVar ListTopDef 'Main' '{' Blok '}' { Grammar.Abs.Program () (reverse $1) (reverse $2) $5 }
TopDefVar :: { (TopDefVar ()) }
TopDefVar : 'create' '(' Type Ident ')' ';' { Grammar.Abs.VarDef () $3 $4 }
ListTopDefVar :: { [TopDefVar ()] }
ListTopDefVar : {- empty -} { [] }
              | ListTopDefVar TopDefVar { flip (:) $1 $2 }
TopDef :: { (TopDef ()) }
TopDef : 'declare' Type Ident '(' ListArg ')' '{' Blok '}' { Grammar.Abs.FnDef () $2 $3 $5 $8 }
ListTopDef :: { [TopDef ()] }
ListTopDef : {- empty -} { [] }
           | ListTopDef TopDef { flip (:) $1 $2 }
Arg :: { (Arg ()) }
Arg : Type Ident { Grammar.Abs.Argcopy () $1 $2 }
    | '&' Type Ident { Grammar.Abs.Argref () $2 $3 }
ListArg :: { [Arg ()] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
Blok :: { (Blok ()) }
Blok : ListStmt { Grammar.Abs.Block () (reverse $1) }
ListStmt :: { [Stmt ()] }
ListStmt : {- empty -} { [] } | ListStmt Stmt { flip (:) $1 $2 }
Stmt :: { (Stmt ()) }
Stmt : ';' { Grammar.Abs.Empty () }
     | TopDefVar { Grammar.Abs.Decl () $1 }
     | TopDef { Grammar.Abs.DeclFun () $1 }
     | Type Ident '=' Expr ';' { Grammar.Abs.Ass () $1 $2 $4 }
     | Type Ident '++' ';' { Grammar.Abs.Incr () $1 $2 }
     | Type Ident '--' ';' { Grammar.Abs.Decr () $1 $2 }
     | 'return' Expr ';' { Grammar.Abs.Ret () $2 }
     | 'return' ';' { Grammar.Abs.Retv () }
     | 'if' Expr 'then' ListStmt 'endif' { Grammar.Abs.Cond () $2 (reverse $4) }
     | 'if' Expr 'then' ListStmt 'else' ListStmt 'endif' { Grammar.Abs.CondElse () $2 (reverse $4) (reverse $6) }
     | 'while' Expr 'then' ListStmt 'endwhile' { Grammar.Abs.While () $2 (reverse $4) }
     | Expr ';' { Grammar.Abs.SExp () $1 }
     | 'continue' ';' { Grammar.Abs.Continue () }
     | 'break' ';' { Grammar.Abs.Break () }
     | 'print' '(' Expr ')' ';' { Grammar.Abs.Print () $3 }
Type :: { (Type ()) }
Type : '$' { Grammar.Abs.Int () }
     | '#' { Grammar.Abs.Str () }
     | '\'' { Grammar.Abs.Bool () }
     | '@' { Grammar.Abs.Void () }
ListType :: { [Type ()] }
ListType : Type { (:[]) $1 } | Type ',' ListType { (:) $1 $3 }
Expr6 :: { Expr () }
Expr6 : Type Ident { Grammar.Abs.EVar () $1 $2 }
      | Integer { Grammar.Abs.ELitInt () $1 }
      | 'True' { Grammar.Abs.ELitTrue () }
      | 'False' { Grammar.Abs.ELitFalse () }
      | Type Ident '(' ListExpr ')' { Grammar.Abs.EApp () $1 $2 $4 }
      | String { Grammar.Abs.EString () $1 }
      | '(' Expr ')' { $2 }
Expr5 :: { Expr () }
Expr5 : '-' Expr6 { Grammar.Abs.Neg () $2 }
      | '!' Expr6 { Grammar.Abs.Not () $2 }
      | Expr6 { $1 }
Expr4 :: { Expr () }
Expr4 : Expr4 MulOp Expr5 { Grammar.Abs.EMul () $1 $2 $3 }
      | Expr5 { $1 }
Expr3 :: { Expr () }
Expr3 : Expr3 AddOp Expr4 { Grammar.Abs.EAdd () $1 $2 $3 }
      | Expr4 { $1 }
Expr2 :: { Expr () }
Expr2 : Expr2 RelOp Expr3 { Grammar.Abs.ERel () $1 $2 $3 }
      | Expr3 { $1 }
Expr1 :: { Expr () }
Expr1 : Expr2 '&&' Expr1 { Grammar.Abs.EAnd () $1 $3 }
      | Expr2 { $1 }
Expr :: { (Expr ()) }
Expr : Expr1 '||' Expr { Grammar.Abs.EOr () $1 $3 } | Expr1 { $1 }
ListExpr :: { [Expr ()] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }
AddOp :: { (AddOp ()) }
AddOp : '+' { Grammar.Abs.Plus () } | '-' { Grammar.Abs.Minus () }
MulOp :: { (MulOp ()) }
MulOp : '*' { Grammar.Abs.Times () }
      | '/' { Grammar.Abs.Div () }
      | '%' { Grammar.Abs.Mod () }
RelOp :: { (RelOp ()) }
RelOp : '<' { Grammar.Abs.LTH () }
      | '<=' { Grammar.Abs.LE () }
      | '>' { Grammar.Abs.GTH () }
      | '>=' { Grammar.Abs.GE () }
      | '==' { Grammar.Abs.EQU () }
      | '!=' { Grammar.Abs.NE () }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

