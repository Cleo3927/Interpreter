-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Grammar.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Grammar.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Grammar.Abs.Ident -> Result
transIdent x = case x of
  Grammar.Abs.Ident string -> failure x

transProg :: Show a => Grammar.Abs.Prog' a -> Result
transProg x = case x of
  Grammar.Abs.Program _ topdefvars topdefs blok -> failure x

transTopDefVar :: Show a => Grammar.Abs.TopDefVar' a -> Result
transTopDefVar x = case x of
  Grammar.Abs.VarDef _ type_ ident -> failure x

transTopDef :: Show a => Grammar.Abs.TopDef' a -> Result
transTopDef x = case x of
  Grammar.Abs.FnDef _ type_ ident args blok -> failure x

transArg :: Show a => Grammar.Abs.Arg' a -> Result
transArg x = case x of
  Grammar.Abs.Argcopy _ type_ ident -> failure x
  Grammar.Abs.Argref _ type_ ident -> failure x

transBlok :: Show a => Grammar.Abs.Blok' a -> Result
transBlok x = case x of
  Grammar.Abs.Block _ stmts -> failure x

transStmt :: Show a => Grammar.Abs.Stmt' a -> Result
transStmt x = case x of
  Grammar.Abs.Empty _ -> failure x
  Grammar.Abs.Decl _ type_ ident -> failure x
  Grammar.Abs.Ass _ type_ ident expr -> failure x
  Grammar.Abs.Incr _ type_ ident -> failure x
  Grammar.Abs.Decr _ type_ ident -> failure x
  Grammar.Abs.Ret _ expr -> failure x
  Grammar.Abs.Retv _ -> failure x
  Grammar.Abs.Cond _ expr stmts -> failure x
  Grammar.Abs.CondElse _ expr stmts1 stmts2 -> failure x
  Grammar.Abs.While _ expr stmts -> failure x
  Grammar.Abs.For _ type_ ident expr1 expr2 stmts -> failure x
  Grammar.Abs.SExp _ expr -> failure x
  Grammar.Abs.Continue _ -> failure x
  Grammar.Abs.Break _ -> failure x
  Grammar.Abs.Print _ expr -> failure x

transType :: Show a => Grammar.Abs.Type' a -> Result
transType x = case x of
  Grammar.Abs.Int _ -> failure x
  Grammar.Abs.Str _ -> failure x
  Grammar.Abs.Bool _ -> failure x
  Grammar.Abs.Void _ -> failure x

transExpr :: Show a => Grammar.Abs.Expr' a -> Result
transExpr x = case x of
  Grammar.Abs.EVar _ type_ ident -> failure x
  Grammar.Abs.ELitInt _ integer -> failure x
  Grammar.Abs.ELitTrue _ -> failure x
  Grammar.Abs.ELitFalse _ -> failure x
  Grammar.Abs.EApp _ type_ ident exprs -> failure x
  Grammar.Abs.EString _ string -> failure x
  Grammar.Abs.Neg _ expr -> failure x
  Grammar.Abs.Not _ expr -> failure x
  Grammar.Abs.EMul _ expr1 mulop expr2 -> failure x
  Grammar.Abs.EAdd _ expr1 addop expr2 -> failure x
  Grammar.Abs.ERel _ expr1 relop expr2 -> failure x
  Grammar.Abs.EAnd _ expr1 expr2 -> failure x
  Grammar.Abs.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => Grammar.Abs.AddOp' a -> Result
transAddOp x = case x of
  Grammar.Abs.Plus _ -> failure x
  Grammar.Abs.Minus _ -> failure x

transMulOp :: Show a => Grammar.Abs.MulOp' a -> Result
transMulOp x = case x of
  Grammar.Abs.Times _ -> failure x
  Grammar.Abs.Div _ -> failure x
  Grammar.Abs.Mod _ -> failure x

transRelOp :: Show a => Grammar.Abs.RelOp' a -> Result
transRelOp x = case x of
  Grammar.Abs.LTH _ -> failure x
  Grammar.Abs.LE _ -> failure x
  Grammar.Abs.GTH _ -> failure x
  Grammar.Abs.GE _ -> failure x
  Grammar.Abs.EQU _ -> failure x
  Grammar.Abs.NE _ -> failure x
